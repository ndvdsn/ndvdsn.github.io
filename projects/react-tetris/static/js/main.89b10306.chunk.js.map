{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","console","log","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89b10306.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\n);\n\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n\n      // 1. check that we're on an actual tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n        // 2. check that movement is in game area height (y)\n        // we shouldn't go through the bottom of the play area\n        !stage[y + player.pos.y + moveY] ||\n        // 3. check that our move is inside the game area width (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n        // 4. Check that the cell we're moving to isn't set to clear\n        stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n\n      ) {\n        return true;\n      }\n      }\n    }\n  }\n};\n","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0'},\n  I: {\n    shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0]\n          ],\n    color: '80, 227, 230',\n  },\n  J: {\n    shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0]\n          ],\n    color: '36, 95, 223',\n  },\n  L: {\n    shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L']\n          ],\n    color: '223, 173, 36',\n  },\n  O: {\n    shape: [\n            ['O', 'O'],\n            ['O', 'O'],\n          ],\n    color: '223, 217, 36',\n  },\n  S: {\n    shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0]\n          ],\n    color: '48, 211, 56',\n  },\n  T: {\n    shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0]\n          ],\n    color: '132, 61, 198',\n  },\n  Z: {\n    shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0]\n          ],\n    color: '227, 78, 78',\n  },\n\n}\n\n// export const TETROMINOS = {\n//   0: { shape: [[0]], color: '0, 0, 0'},\n//   I: {\n//     shape: [\n//             [0, 'I', 0],\n//             [0, 'I', 0],\n//             [0, 'I', 0],\n//             [0, 'I', 0]\n//           ],\n//     color: '80, 227, 230',\n//   },\n//   J: {\n//     shape: [\n//             [0, 'J'],\n//             [0, 'J'],\n//             ['J', 'J']\n//           ],\n//     color: '36, 95, 223',\n//   },\n//   L: {\n//     shape: [\n//             ['L', 0],\n//             ['L', 0],\n//             ['L', 'L']\n//           ],\n//     color: '223, 173, 36',\n//   },\n//   O: {\n//     shape: [\n//             ['O', 'O'],\n//             ['O', 'O'],\n//           ],\n//     color: '223, 217, 36',\n//   },\n//   S: {\n//     shape: [\n//             [0, 'S', 'S'],\n//             ['S', 'S', 0]\n//           ],\n//     color: '48, 211, 56',\n//   },\n//   T: {\n//     shape: [\n//             ['T', 'T', 'T'],\n//             [0, 'T', 0]\n//           ],\n//     color: '132, 61, 198',\n//   },\n//   Z: {\n//     shape: [\n//             ['Z', 'Z', 0],\n//             [0, 'Z', 'Z'],\n//           ],\n//     color: '227, 78, 78',\n//   },\n//\n// }\n\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n    tetrominos[Math.floor(Math.random()* tetrominos.length)];\n  return TETROMINOS[randTetromino];\n}\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, [])\n    const updateStage = prevStage => {\n        // First flush the stage\n        const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n      // console.log(newStage);\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`\n;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type ===0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n)\n\nexport default React.memo(Cell);\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]}/>))}\n\n  </StyledStage>\n)\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`\n","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\nexport default Display;\n","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`\n","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n)\n\nexport default StartButton;\n","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// styled components\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// custom hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n  // console.log('re-render');\n\n  const movePlayer = dir => {\n    // console.log('movePlayer called')\n    if (!checkCollision(player, stage, { x: dir, y: 0})) {\n      updatePlayerPos({ x: dir, y: 0 });\n      // console.log(\"movePlayer\", dir)\n    }\n  }\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  }\n\n  const drop = () => {\n    // increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false})\n    } else {\n      // game over\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  }\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        // console.log(\"interval on\")\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n  }\n\n  const dropPlayer = () => {\n    // console.log(\"interval off\")\n    setDropTime(null);\n    drop();\n  }\n\n  const move = ({ keyCode }) => {\n    // console.log('move called')\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1)\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  }\n\n  useInterval(() => {\n    drop();\n  }, dropTime)\n\n\n  return (\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n      <StyledTetris>\n        <Stage stage={stage}/>\n          <aside>\n            {gameOver ? (\n              <Display gameOver={gameOver} text=\"Game Over\" />\n            ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`Rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n            )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nimport { checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0},\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix, dir) => {\n    // Make the rows become cols (transpose)\n    const rotatedTetro = matrix.map((_, index) =>\n    matrix.map(col => col[index]),\n  );\n  // reverse each row to get a rotated matrix\n  if (dir > 0) return rotatedTetro.map(row => row.reverse());\n  return rotatedTetro.reverse();\n};\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n    // console.log(clonedPlayer)\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    // console.log(\"updatePlayerPos called\")\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x + x), y: (prev.pos.y + y)},\n      collided,\n    }))\n\n    // console.log({pos: x}, {pos: y})\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 -2, y: 0},\n      tetromino: randomTetromino().shape,\n      collided: false,\n    })\n  }, [])\n\n\nreturn [player, updatePlayerPos, resetPlayer, playerRotate];\n\n}\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // we have score\n    if (rowsCleared > 0) {\n      // Calculate score\n      console.log(rows)\n      setScore(prev => prev + linePoints[rowsCleared -1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n      console.log(rows)\n    }\n  }, [level, linePoints, rows, rowsCleared])\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score])\n\n  return [score, setScore, rows, setRows, level, setLevel];\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n    </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}