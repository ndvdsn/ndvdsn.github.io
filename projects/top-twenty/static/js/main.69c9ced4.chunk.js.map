{"version":3,"sources":["components/Song.js","components/SongList.js","components/Selector.js","containers/SongContainer.js","App.js","serviceWorker.js","index.js"],"names":["Song","props","className","src","image","alt","title","ref","audio","id","position","controls","artist","SongList","songs","length","map","song","index","key","label","link","attributes","href","Selector","onChange","handleSelectChange","genres","genre","name","value","url","SongContainer","state","bind","this","loadSongs","fetch","then","response","json","data","setState","feed","entry","event","target","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0NA4BeA,EA1BF,SAACC,GAGZ,OACE,yBAAKC,UAAU,QACb,yBACEC,IAAKF,EAAMG,MACXC,IAAKJ,EAAMK,QAEb,2BACEC,IAAK,SAACC,GAAD,OAAmBA,GACxBC,GAAI,QAAUR,EAAMS,SACpBP,IAAKF,EAAMO,MAAOG,UAAQ,IAE5B,yBAAKT,UAAU,WACb,sCAAYD,EAAMK,OAClB,uCAAaL,EAAMW,QACnB,yCAAeX,EAAMS,aCWdG,EA3BE,SAACZ,GAEhB,OAAmB,MAAfA,EAAMa,OAAwC,IAAvBb,EAAMa,MAAMC,OAC9B,yCAIP,6BACGd,EAAMa,MAAME,KAAI,SAACC,EAAMC,GACtB,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLR,SAAUQ,EAAQ,EAClBZ,MAAOW,EAAK,WAAWG,MACvBR,OAAQK,EAAK,aAAaG,MAC1BhB,MAAOa,EAAK,YAAY,GAAGG,MAC3BZ,MAAOS,EAAKI,KAAK,GAAGC,WAAWC,YCJ1BC,EAbE,SAACvB,GAChB,OACE,yBAAKC,UAAU,YACb,sCACA,4BAAQuB,SAAUxB,EAAMyB,oBACvBzB,EAAM0B,OAAOX,KAAI,SAAAY,GAChB,OAAO,4BAAQT,IAAKS,EAAMC,KAAMC,MAAOF,EAAMG,KAAMH,EAAMC,YCuClDG,E,kDA1Cb,WAAY/B,GAAO,IAAD,8BAChB,cAAMA,IACDgC,MAAQ,CACXnB,MAAO,IAET,EAAKY,mBAAqB,EAAKA,mBAAmBQ,KAAxB,gBALV,E,gEAShBC,KAAKC,UAAUD,KAAKlC,MAAM0B,OAAO,GAAGI,O,gCAG5BA,GAAM,IAAD,OACbM,MAAMN,GACLO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAC5B,MAAO2B,EAAKE,KAAKC,a,yCAG7BC,GACjBV,KAAKC,UAAUS,EAAMC,OAAOhB,S,+BAI5B,OACE,6BACE,kBAAC,EAAD,CACEJ,mBAAoBS,KAAKT,mBACzBC,OAAQQ,KAAKlC,MAAM0B,SAGrB,kBAAC,EAAD,CACAb,MAAOqB,KAAKF,MAAMnB,MAClBiB,IAAKI,KAAKlC,MAAM0B,OAAO,GAAGI,IAC1BL,mBAAoBS,KAAKT,0B,GAlCLqB,aC2BbC,E,uKANX,OACE,kBAAC,EAAD,CAAerB,OAnBF,CACb,CAACE,KAAM,oBAAqBE,IAAK,0DACjC,CAACF,KAAM,QAASE,IAAK,mEACrB,CAACF,KAAM,aAAcE,IAAK,mEAC1B,CAACF,KAAM,aAAcE,IAAK,mEAC1B,CAACF,KAAM,aAAcE,IAAK,kEAC1B,CAACF,KAAM,cAAeE,IAAK,kEAC3B,CAACF,KAAM,cAAeE,IAAK,kEAC3B,CAACF,KAAM,eAAgBE,IAAK,kEAC5B,CAACF,KAAM,mBAAoBE,IAAK,kEAChC,CAACF,KAAM,QAASE,IAAK,kEACrB,CAACF,KAAM,qBAAsBE,IAAK,mEAClC,CAACF,KAAM,cAAeE,IAAK,mEAC3B,CAACF,KAAM,YAAaE,IAAK,mEACzB,CAACF,KAAM,kBAAmBE,IAAK,0E,GAjBnBgB,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.69c9ced4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Song = (props) => {\n  // const altTag = `${this.props.title} by ${this.props.artist}`;\n\n  return (\n    <div className=\"song\">\n      <img\n        src={props.image}\n        alt={props.title}\n      />\n      <audio\n        ref={(audio) => audio = audio}\n        id={'audio' + props.position}\n        src={props.audio} controls/>\n\n      <div className=\"details\">\n        <h4>Title: {props.title}</h4>\n        <h4>Artist: {props.artist}</h4>\n        <h4>Position: {props.position}</h4>\n      </div>\n\n\n\n\n    </div>\n  )\n}\nexport default Song;\n","import React from 'react';\nimport Song from './Song';\n\nconst SongList = (props) => {\n\n  if (props.songs == null || props.songs.length === 0) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <div>\n      {props.songs.map((song, index) => {\n        return (\n          <Song\n          key={index}\n          position={index + 1}\n          title={song['im:name'].label}\n          artist={song['im:artist'].label}\n          image={song['im:image'][1].label}\n          audio={song.link[1].attributes.href}\n          />\n\n        )\n      })}\n      </div>\n  )\n\n\n\n}\nexport default SongList;\n","import React from 'react';\n\nconst Selector = (props) => {\n  return (\n    <div className=\"selector\">\n      <h1>TOP 20</h1>\n      <select onChange={props.handleSelectChange}>\n      {props.genres.map(genre => {\n        return <option key={genre.name} value={genre.url}>{genre.name}</option>\n      })}\n      </select>\n    </div>\n  );\n};\n\nexport default Selector;\n","import React, {Component} from 'react';\nimport SongList from '../components/SongList';\nimport Selector from '../components/Selector';\n\nclass SongContainer extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      songs: [],\n    };\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n  }\n\n  componentDidMount(){\n    this.loadSongs(this.props.genres[0].url)\n  }\n\n  loadSongs(url) {\n    fetch(url)\n    .then(response => response.json())\n    .then(data => this.setState({songs: data.feed.entry}))\n  }\n\n  handleSelectChange(event) {\n    this.loadSongs(event.target.value);\n  }\n\n  render(){\n    return (\n      <div>\n        <Selector\n          handleSelectChange={this.handleSelectChange}\n          genres={this.props.genres}\n          />\n\n        <SongList\n        songs={this.state.songs}\n        url={this.props.genres[0].url}\n        handleSelectChange={this.handleSelectChange}\n\n        />\n      </div>\n    )\n  }\n\n\n}\nexport default SongContainer;\n","import React, { Component } from 'react';\nimport SongContainer from \"./containers/SongContainer\"\n\n\nclass App extends Component {\n  render() {\n\n    const genres = [\n      {name: \"Genre Select: All\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/json\"},\n      {name: \"World\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=19/json\"},\n      {name: \"Soundtrack\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=16/json\"},\n      {name: \"Light Folk\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=10/json\"},\n      {name: \"Mysterious\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=3/json\"},\n      {name: \"Child Noise\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=4/json\"},\n      {name: \"Light Light\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=5/json\"},\n      {name: \"Country Lows\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=6/json\"},\n      {name: \"Internet Era Pop\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=7/json\"},\n      {name: \"Opera\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=9/json\"},\n      {name: \"Limited Jazz Vocal\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=11/json\"},\n      {name: \"World Urban\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=12/json\"},\n      {name: \"Esoterica\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=13/json\"},\n      {name: \"Soul Funk Disco\", url: \"https://itunes.apple.com/gb/rss/topsongs/limit=20/genre=15/json\"}\n    ]\n\n\n    return (\n      <SongContainer genres={genres} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}